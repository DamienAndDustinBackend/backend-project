// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package main

import (
	"context"
	"database/sql"
)

const createFile = `-- name: CreateFile :exec
INSERT INTO files (
    name, description, type, file_path
) VALUES (
  ?, ?, ?, ?
)
`

type CreateFileParams struct {
	Name        sql.NullString
	Description sql.NullString
	Type        sql.NullString
	FilePath    sql.NullString
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) error {
	_, err := q.db.ExecContext(ctx, createFile,
		arg.Name,
		arg.Description,
		arg.Type,
		arg.FilePath,
	)
	return err
}

const createTag = `-- name: CreateTag :exec
INSERT INTO tags (
    name
) VALUES (
    ?
)
`

func (q *Queries) CreateTag(ctx context.Context, name sql.NullString) error {
	_, err := q.db.ExecContext(ctx, createTag, name)
	return err
}

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM files WHERE id = ?
`

func (q *Queries) DeleteFile(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteFile, id)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags WHERE id = ?
`

func (q *Queries) DeleteTag(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}

const getFile = `-- name: GetFile :one
SELECT id, name, description, type, file_path FROM files
WHERE id = ? LIMIT 1
`

func (q *Queries) GetFile(ctx context.Context, id int32) (File, error) {
	row := q.db.QueryRowContext(ctx, getFile, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Type,
		&i.FilePath,
	)
	return i, err
}

const getFilesByTag = `-- name: GetFilesByTag :many
SELECT id, name, description, type, file_path
FROM files
`

func (q *Queries) GetFilesByTag(ctx context.Context) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, getFilesByTag)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Type,
			&i.FilePath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTag = `-- name: GetTag :one
SELECT id, name FROM tags
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTag(ctx context.Context, id int32) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTag, id)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getTagsForFile = `-- name: GetTagsForFile :many

SELECT id, name
FROM tags
`

// JOIN files_tags ON files.id = file_tags.file_id
// JOIN tags ON file_tags.tag_id = tags.id
func (q *Queries) GetTagsForFile(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTagsForFile)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFiles = `-- name: ListFiles :many
SELECT id, name, description, type, file_path FROM files
`

func (q *Queries) ListFiles(ctx context.Context) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, listFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Type,
			&i.FilePath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :one
SELECT id, name FROM tags
`

func (q *Queries) ListTags(ctx context.Context) (Tag, error) {
	row := q.db.QueryRowContext(ctx, listTags)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateFile = `-- name: UpdateFile :exec
UPDATE files SET name = ?, description = ?, type = ?, type = ?, file_path = ?
WHERE id = ?
`

type UpdateFileParams struct {
	Name        sql.NullString
	Description sql.NullString
	Type        sql.NullString
	Type_2      sql.NullString
	FilePath    sql.NullString
	ID          int32
}

func (q *Queries) UpdateFile(ctx context.Context, arg UpdateFileParams) error {
	_, err := q.db.ExecContext(ctx, updateFile,
		arg.Name,
		arg.Description,
		arg.Type,
		arg.Type_2,
		arg.FilePath,
		arg.ID,
	)
	return err
}

const updateTag = `-- name: UpdateTag :exec
UPDATE tags SET name = ?
WHERE id = ?
`

type UpdateTagParams struct {
	Name sql.NullString
	ID   int32
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) error {
	_, err := q.db.ExecContext(ctx, updateTag, arg.Name, arg.ID)
	return err
}
